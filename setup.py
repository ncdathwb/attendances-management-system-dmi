#!/usr/bin/env python3
"""
Automated Setup Script for Attendance Management System
Professional automated setup - just run and everything will be ready!
"""
import os
import sys
import subprocess
import time as time_module
from pathlib import Path

class AutoSetup:
    """Automated setup class for the attendance management system"""
    
    def __init__(self):
        self.project_root = Path(__file__).parent
        self.env_file = self.project_root / '.env'
        self.requirements_file = self.project_root / 'requirements.txt'
        
    def print_banner(self):
        """Print welcome banner"""
        print("=" * 60)
        print("üöÄ ATTENDANCE MANAGEMENT SYSTEM - AUTO SETUP")
        print("=" * 60)
        print("This script will automatically setup everything for you!")
        print("=" * 60)
        
    def check_python_version(self):
        """Check if Python version is compatible"""
        print("üêç Checking Python version...")
        version = sys.version_info
        if version.major < 3 or (version.major == 3 and version.minor < 8):
            print("‚ùå Python 3.8+ is required!")
            print(f"Current version: {version.major}.{version.minor}.{version.micro}")
            return False
        print(f"‚úÖ Python {version.major}.{version.minor}.{version.micro} - OK")
        return True
        
    def create_env_file(self):
        """Create .env file with default configuration"""
        print("üìù Creating environment configuration...")
        
        if self.env_file.exists():
            print("‚ÑπÔ∏è  .env file already exists, skipping...")
            return True
            
        env_content = """# Attendance Management System Environment Configuration

# Database Configuration - SQLite Only
DATABASE_URL=sqlite:///attendance.db

# Flask Configuration
SECRET_KEY=your-super-secret-key-change-this-in-production
FLASK_ENV=development
FLASK_DEBUG=True

# Application Configuration
APP_NAME=Attendance Management System
APP_VERSION=1.0.0
"""
        
        try:
            with open(self.env_file, 'w', encoding='utf-8') as f:
                f.write(env_content)
            print("‚úÖ .env file created successfully!")
            return True
        except Exception as e:
            print(f"‚ùå Error creating .env file: {e}")
            return False
            
    def install_dependencies(self):
        """Install Python dependencies"""
        print("üì¶ Installing Python dependencies...")
        
        # Choose requirements file based on platform
        if os.name == 'nt':  # Windows
            requirements_file = self.project_root / 'requirements-windows.txt'
            if not requirements_file.exists():
                requirements_file = self.requirements_file  # Fallback to original
        else:
            requirements_file = self.requirements_file
            
        if not requirements_file.exists():
            print("‚ùå requirements file not found!")
            return False
            
        try:
            # Upgrade pip first
            subprocess.run([sys.executable, '-m', 'pip', 'install', '--upgrade', 'pip'], 
                         check=True, capture_output=True)
            
            # Install requirements
            result = subprocess.run([sys.executable, '-m', 'pip', 'install', '-r', str(requirements_file)], 
                                  check=True, capture_output=True, text=True)
            
            print("‚úÖ Dependencies installed successfully!")
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Error installing dependencies: {e}")
            print(f"Error output: {e.stderr}")
            print("üí° Try using: pip install -r requirements-windows.txt")
            return False
            
    def setup_database(self):
        """Setup database using the database manager"""
        print("üóÑÔ∏è  Setting up database...")
        
        try:
            # Import and run database setup
            sys.path.append(str(self.project_root))
            from database.init_db import DatabaseManager
            
            db_manager = DatabaseManager()
            
            # Show database info
            db_manager.show_info()
            
            # Check if database already exists and has tables
            if db_manager.check_connection():
                print("‚ÑπÔ∏è  Database connection successful!")
                
                # Check if tables exist
                import sqlite3
                try:
                    conn = sqlite3.connect(db_manager.db_file)
                    cursor = conn.cursor()
                    cursor.execute("SELECT name FROM sqlite_master WHERE type='table' AND name='users'")
                    if cursor.fetchone():
                        print("‚ÑπÔ∏è  Database schema already exists, skipping schema creation...")
                        cursor.close()
                        conn.close()
                        print("‚úÖ Database setup completed!")
                        return True
                    cursor.close()
                    conn.close()
                except Exception:
                    pass  # Continue with schema creation if check fails
            
            # Create database
            if not db_manager.create_database():
                print("‚ùå Failed to create database!")
                return False
                
            # Create schema
            if not db_manager.create_schema():
                print("‚ùå Failed to create schema!")
                print("üí° If tables already exist, try: python database/init_db.py (option 5 to reset)")
                return False
                
            print("‚úÖ Database setup completed!")
            return True
            
        except Exception as e:
            print(f"‚ùå Database setup error: {e}")
            return False
            
    def seed_data(self):
        """Seed initial data"""
        print("üå± Seeding initial data...")
        
        try:
            # Set environment for Unicode support
            env = os.environ.copy()
            env['PYTHONIOENCODING'] = 'utf-8'
            
            # Seed users
            print("   Creating users...")
            result = subprocess.run([sys.executable, 'seeds/users.py', 'seed'], 
                                  check=True, capture_output=True, text=True, encoding='utf-8', env=env)
            print("   ‚úÖ Users seeded!")
            
            # Seed attendance data
            print("   Creating sample attendance data...")
            result = subprocess.run([sys.executable, 'seeds/attendance.py', 'seed', '30', '20'], 
                                  check=True, capture_output=True, text=True, encoding='utf-8', env=env)
            print("   ‚úÖ Attendance data seeded!")
            
            print("‚úÖ Data seeding completed!")
            return True
            
        except subprocess.CalledProcessError as e:
            print(f"‚ùå Data seeding error: {e}")
            print(f"Error output: {e.stderr}")
            return False
            
    def create_startup_script(self):
        """Create startup script for easy application launch"""
        print("üöÄ Creating startup script...")
        
        # Windows batch file
        startup_bat = self.project_root / 'start.bat'
        bat_content = """@echo off
echo Starting Attendance Management System...
echo.
python app.py
pause
"""
        
        # Linux/Mac shell script
        startup_sh = self.project_root / 'start.sh'
        sh_content = """#!/bin/bash
echo "Starting Attendance Management System..."
echo ""
python3 app.py
"""
        
        try:
            # Create Windows script
            with open(startup_bat, 'w', encoding='utf-8') as f:
                f.write(bat_content)
            
            # Create Linux/Mac script
            with open(startup_sh, 'w', encoding='utf-8') as f:
                f.write(sh_content)
            
            # Make shell script executable on Unix systems
            if os.name != 'nt':  # Not Windows
                os.chmod(startup_sh, 0o755)
                
            print("‚úÖ Startup scripts created!")
            return True
            
        except Exception as e:
            print(f"‚ùå Error creating startup scripts: {e}")
            return False
            
    def create_readme(self):
        """Create comprehensive README file"""
        print("üìñ Creating documentation...")
        
        readme_content = """# Attendance Management System

## üöÄ Quick Start

### Option 1: Automated Setup (Recommended)
```bash
python setup.py
```

### Option 2: Manual Setup
1. Install dependencies: `pip install -r requirements.txt`
2. Setup database: `python database/init_db.py`
3. Seed data: `python seeds/users.py seed && python seeds/attendance.py seed`
4. Run application: `python app.py`

## üìã System Requirements
- Python 3.8+
- SQLite (built into Python)
- 2GB RAM minimum

## üîß Configuration
Edit `.env` file to configure:
- Database connection
- Flask settings
- Application settings

## üë• Default Users
- **Admin**: Employee ID `1395`, Password `dat123`
- **Other users**: See `user_list.txt` for details

## üóÑÔ∏è Database Management
- **Reset database**: `python database/init_db.py` (option 5)
- **Clear data**: `python seeds/users.py clear && python seeds/attendance.py clear`

## üåê Access Application
- URL: http://localhost:5000
- Default port: 5000

## üìÅ Project Structure
```
attendance-management-system/
‚îú‚îÄ‚îÄ app.py                 # Main application
‚îú‚îÄ‚îÄ config.py             # Configuration
‚îú‚îÄ‚îÄ database/             # Database management
‚îÇ   ‚îú‚îÄ‚îÄ models.py         # SQLAlchemy models
‚îÇ   ‚îú‚îÄ‚îÄ schema.sql        # Database schema
‚îÇ   ‚îî‚îÄ‚îÄ init_db.py        # Database initialization
‚îú‚îÄ‚îÄ seeds/                # Data seeding
‚îÇ   ‚îú‚îÄ‚îÄ users.py          # User seeding
‚îÇ   ‚îî‚îÄ‚îÄ attendance.py     # Attendance seeding
‚îú‚îÄ‚îÄ static/               # Static files (CSS, JS)
‚îú‚îÄ‚îÄ templates/            # HTML templates
‚îî‚îÄ‚îÄ requirements.txt      # Python dependencies
```

## üîí Security Notes
- Change default passwords in production
- Update SECRET_KEY in .env file
- Configure proper database credentials
- Enable HTTPS in production

## üêõ Troubleshooting
1. **Database connection error**: Check SQLite file permissions and disk space
2. **Port already in use**: Change port in app.py or kill existing process
3. **Import errors**: Ensure all dependencies are installed

## üìû Support
For issues and questions, check the logs or contact the development team.
"""
        
        try:
            with open(self.project_root / 'README.md', 'w', encoding='utf-8') as f:
                f.write(readme_content)
            print("‚úÖ Documentation created!")
            return True
        except Exception as e:
            print(f"‚ùå Error creating documentation: {e}")
            return False
            
    def run_tests(self):
        """Run basic system tests"""
        print("üß™ Running system tests...")
        
        try:
            # Test database connection
            sys.path.append(str(self.project_root))
            from database.init_db import DatabaseManager
            
            db_manager = DatabaseManager()
            if db_manager.check_connection():
                print("   ‚úÖ Database connection test passed!")
            else:
                print("   ‚ùå Database connection test failed!")
                return False
                
            # Test imports
            try:
                from app import app
                print("   ‚úÖ Application import test passed!")
            except Exception as e:
                print(f"   ‚ùå Application import test failed: {e}")
                return False
                
            print("‚úÖ All tests passed!")
            return True
            
        except Exception as e:
            print(f"‚ùå Test error: {e}")
            return False
            
    def show_success_message(self):
        """Show success message with next steps"""
        print("\n" + "=" * 60)
        print("üéâ SETUP COMPLETED SUCCESSFULLY!")
        print("=" * 60)
        print("\nüìã What's been set up:")
        print("   ‚úÖ Python environment configured")
        print("   ‚úÖ Dependencies installed")
        print("   ‚úÖ Database created and configured")
        print("   ‚úÖ Sample data seeded")
        print("   ‚úÖ Startup scripts created")
        print("   ‚úÖ Documentation generated")
        print("   ‚úÖ System tests passed")
        
        print("\nüöÄ Next Steps:")
        print("   1. Start the application:")
        if os.name == 'nt':  # Windows
            print("      Double-click 'start.bat' or run: python app.py")
        else:  # Linux/Mac
            print("      Run: ./start.sh or python app.py")
        
        print("   2. Open your browser and go to: http://localhost:5000")
        print("   3. Login with:")
        print("      - Employee ID: 1395")
        print("      - Password: dat123")
        
        print("\nüìö Useful Commands:")
        print("   - Reset database: python database/init_db.py")
        print("   - Clear data: python seeds/users.py clear")
        print("   - Add more data: python seeds/attendance.py seed")
        
        print("\nüîß Configuration:")
        print("   - Edit .env file to change database settings")
        print("   - Edit config.py for application settings")
        
        print("\nüìñ Documentation:")
        print("   - See README.md for detailed information")
        print("   - Check user_list.txt for all user accounts")
        
        print("\n" + "=" * 60)
        print("üéØ Your Attendance Management System is ready!")
        print("=" * 60)
        
    def run_full_setup(self):
        """Run complete automated setup"""
        self.print_banner()
        
        # Set environment variables
        os.environ['FLASK_CONFIG'] = 'development'
        os.environ['FLASK_DEBUG'] = 'False'  # Set to False for production
        os.environ['SECRET_KEY'] = 'your-production-secret-key-change-this'
        
        steps = [
            ("Checking Python version", self.check_python_version),
            ("Creating environment config", self.create_env_file),
            ("Installing dependencies", self.install_dependencies),
            ("Setting up database", self.setup_database),
            ("Seeding initial data", self.seed_data),
            ("Creating startup scripts", self.create_startup_script),
            ("Creating documentation", self.create_readme),
            ("Running system tests", self.run_tests)
        ]
        
        for step_name, step_func in steps:
            print(f"\nüîÑ {step_name}...")
            if not step_func():
                print(f"\n‚ùå Setup failed at: {step_name}")
                print("Please check the error messages above and try again.")
                return False
            time_module.sleep(1)  # Small delay for better UX
            
        self.show_success_message()
        return True

def main():
    """Main function"""
    setup = AutoSetup()
    
    if len(sys.argv) > 1:
        command = sys.argv[1]
        if command == 'test':
            setup.run_tests()
        elif command == 'db':
            setup.setup_database()
        elif command == 'seed':
            setup.seed_data()
        else:
            print("Usage: python setup.py [test|db|seed]")
    else:
        setup.run_full_setup()

if __name__ == '__main__':
    main() 