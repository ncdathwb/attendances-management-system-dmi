import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart
from datetime import datetime
import threading
import time

def send_leave_request_email(leave_request, user, action='create'):
    """
    G·ª≠i email xin ph√©p ngh·ªâ ƒë·∫øn ph√≤ng nh√¢n s·ª±
    """
    try:
        print("=== B·∫ÆT ƒê·∫¶U G·ª¨I EMAIL XIN PH√âP NGH·ªà ===", flush=True)
        print(f"User: {user.name} (ID: {user.id})")
        print(f"Leave Request ID: {leave_request.id}")
        
        # C·∫•u h√¨nh SMTP t·ª´ config (kh√¥ng d√πng current_app)
        from config import Config
        smtp_server = Config.SMTP_SERVER
        smtp_port = Config.SMTP_PORT
        smtp_user = Config.SMTP_USER
        smtp_password = Config.SMTP_PASSWORD
        # L·∫•y email t·ª´ th√¥ng tin c√° nh√¢n c·ªßa ng∆∞·ªùi g·ª≠i ƒë∆°n
        employee_email = (user.email or '').strip() if hasattr(user, 'email') else ''
        allowed_domain = '@dmi-acraft.net'
        print(f"Employee email: {employee_email}")
        print(f"Allowed domain: {allowed_domain}")
        # Y√äU C·∫¶U: d√πng mail c√° nh√¢n (nh√¢n vi√™n) ƒë·ªÉ g·ª≠i
        # Ch·ªçn From = email nh√¢n vi√™n n·∫øu c√≥; fallback MAIL_FROM n·∫øu kh√¥ng c√≥
        use_personal_sender = bool(employee_email)
        from_email = employee_email if use_personal_sender else Config.MAIL_FROM
        print(f"Chosen From email (personal mode): {from_email}")
        hr_email = Config.HR_EMAIL
        
        print(f"SMTP Server: {smtp_server}", flush=True)
        print(f"SMTP Port: {smtp_port}", flush=True)
        print(f"SMTP User: {smtp_user}", flush=True)
        print(f"SMTP Password: {'***' if smtp_password else 'None'}", flush=True)
        print(f"From Email: {from_email}", flush=True)
        print(f"HR Email: {hr_email}", flush=True)
        
        # Ki·ªÉm tra email c√≥ t·ªìn t·∫°i kh√¥ng (∆∞u ti√™n email c√° nh√¢n, fallback v·ªÅ MAIL_FROM)
        if not from_email:
            print('‚ö†Ô∏è User email not found, using default MAIL_FROM')
            from_email = Config.MAIL_FROM
            if not from_email:
                print('‚ùå No email configuration found. Cannot send email.')
                return False
            
        # Ki·ªÉm tra c·∫•u h√¨nh SMTP
        if not all([smtp_server, smtp_port, smtp_user, smtp_password]):
            print('‚ùå SMTP configuration incomplete. Cannot send email.')
            print(f"Missing: SMTP_SERVER={smtp_server}, SMTP_PORT={smtp_port}, SMTP_USER={smtp_user}, SMTP_PASSWORD={'***' if smtp_password else 'None'}")
            return False
            
        # T·∫°o n·ªôi dung email
        action_label = 'T·∫†O ƒê∆†N' if str(action).lower() == 'create' else 'C·∫¨P NH·∫¨T'
        subject = f"[{action_label}] [XIN PH√âP NGH·ªà] {user.name} - {leave_request.leave_reason}"
        print(f"Email Subject: {subject}", flush=True)
        
        # ƒê·ªãnh d·∫°ng ng√†y th√°ng (t∆∞∆°ng th√≠ch v·ªõi model hi·ªán t·∫°i)
        def _safe_get_datetimes(lr):
            get_from = getattr(lr, 'get_leave_from_datetime', None)
            get_to = getattr(lr, 'get_leave_to_datetime', None)
            if callable(get_from) and callable(get_to):
                try:
                    return get_from(), get_to()
                except Exception:
                    pass
            try:
                from_dt = datetime(
                    int(lr.leave_from_year), int(lr.leave_from_month), int(lr.leave_from_day),
                    int(lr.leave_from_hour or 0), int(lr.leave_from_minute or 0)
                )
                to_dt = datetime(
                    int(lr.leave_to_year), int(lr.leave_to_month), int(lr.leave_to_day),
                    int(lr.leave_to_hour or 0), int(lr.leave_to_minute or 0)
                )
                return from_dt, to_dt
            except Exception:
                now = datetime.now()
                return now, now

        from_dt, to_dt = _safe_get_datetimes(leave_request)
        from_date = from_dt.strftime('%d/%m/%Y')
        to_date = to_dt.strftime('%d/%m/%Y')
        from_time = from_dt.strftime('%H:%M')
        to_time = to_dt.strftime('%H:%M')
        
        # T√≠nh t·ªïng s·ªë ng√†y ngh·ªâ
        total_days = (leave_request.annual_leave_days or 0) + (leave_request.unpaid_leave_days or 0) + (leave_request.special_leave_days or 0)
        # Th√¥ng tin b·ªï sung cho HR
        has_docs = bool(getattr(leave_request, 'attachments', None) or getattr(leave_request, 'hospital_confirmation', None) or getattr(leave_request, 'wedding_invitation', None) or getattr(leave_request, 'death_birth_certificate', None))
        status = getattr(leave_request, 'status', 'pending')
        created_at = getattr(leave_request, 'created_at', None)
        updated_at = getattr(leave_request, 'updated_at', None)
        
        # T·∫°o HTML content
        # T√≠nh badge tr·∫°ng th√°i
        status_text = 'Ch·ªù ph√™ duy·ªát'
        status_style = 'display:inline-block;padding:4px 10px;border-radius:999px;font-size:12px;background:#fff7e6;color:#ad6800;border:1px solid #ffe58f;'
        if status == 'approved':
            status_text = 'ƒê√£ ph√™ duy·ªát'
            status_style = 'display:inline-block;padding:4px 10px;border-radius:999px;font-size:12px;background:#f6ffed;color:#237804;border:1px solid #b7eb8f;'
        elif status == 'rejected':
            status_text = 'T·ª´ ch·ªëi'
            status_style = 'display:inline-block;padding:4px 10px;border-radius:999px;font-size:12px;background:#fff1f0;color:#a8071a;border:1px solid #ffa39e;'

        html_content = f"""
        <html>
        <head>
            <style>
                body {{ font-family: Arial, sans-serif; line-height: 1.6; color: #333; }}
                .header {{ background-color: #f8f9fa; padding: 20px; border-left: 4px solid #007bff; }}
                .content {{ padding: 20px; }}
                .info-table {{ 
                    width: 100%; 
                    border-collapse: collapse; 
                    margin: 15px 0; 
                    table-layout: fixed;
                }}
                .info-table th, .info-table td {{ 
                    border: 1px solid #ddd; 
                    padding: 15px; 
                    text-align: left; 
                    vertical-align: top;
                    word-wrap: break-word;
                }}
                .info-table th {{ 
                    background-color: #f8f9fa; 
                    font-weight: bold; 
                    width: 30%;
                    min-width: 120px;
                }}
                .info-table td {{ 
                    width: 70%;
                    background-color: #ffffff;
                }}
                .highlight {{ background-color: #fff3cd; padding: 10px; border-left: 4px solid #ffc107; margin: 15px 0; }}
                .footer {{ background-color: #f8f9fa; padding: 15px; text-align: center; font-size: 12px; color: #666; }}
            </style>
        </head>
        <body>
            <div class="header">
                <h2>üìã ƒê∆†N XIN NGH·ªà PH√âP</h2>
                <p><strong>Lo·∫°i email:</strong> {action_label}</p>
                <p><strong>G·ª≠i t·ª´:</strong> {user.name} ({getattr(user, 'employee_id', '')})</p>
                <p><strong>Email:</strong> {from_email}</p>
                <p><strong>Th·ªùi gian g·ª≠i:</strong> {datetime.now().strftime('%d/%m/%Y %H:%M')}</p>
            </div>
            
            <div class="content">
                <h3>üìÖ Th√¥ng tin ngh·ªâ ph√©p</h3>
                <table class="info-table">
                    <tr>
                        <th>L√Ω do ngh·ªâ</th>
                        <td>{leave_request.leave_reason}</td>
                    </tr>
                    <tr>
                        <th>Kho·∫£ng th·ªùi gian</th>
                        <td>{from_date} {from_time} - {to_date} {to_time}</td>
                    </tr>
                    <tr>
                        <th>Ca l√†m vi·ªác</th>
                        <td>Ca {leave_request.shift_code or '1'}</td>
                    </tr>
                    <tr>
                        <th>T·ªïng s·ªë ng√†y ngh·ªâ</th>
                        <td><strong>{total_days} ng√†y</strong></td>
                    </tr>
                </table>
                
                <h3>üìä Ph√¢n b·ªï ng√†y ngh·ªâ</h3>
                <table class="info-table">
                    <tr>
                        <th>Ph√©p nƒÉm</th>
                        <td>{leave_request.annual_leave_days or 0} ng√†y</td>
                    </tr>
                    <tr>
                        <th>Ngh·ªâ kh√¥ng l∆∞∆°ng</th>
                        <td>{leave_request.unpaid_leave_days or 0} ng√†y</td>
                    </tr>
                    <tr>
                        <th>Ngh·ªâ ƒë·∫∑c bi·ªát</th>
                        <td>{leave_request.special_leave_days or 0} ng√†y</td>
                    </tr>
                </table>
                
                <h3>üë• Th√¥ng tin thay th·∫ø</h3>
                <table class="info-table">
                    <tr>
                        <th>Ng∆∞·ªùi thay th·∫ø</th>
                        <td>{leave_request.substitute_name or 'Ch∆∞a ch·ªâ ƒë·ªãnh'}</td>
                    </tr>
                    <tr>
                        <th>M√£ nh√¢n vi√™n thay th·∫ø</th>
                        <td>{getattr(leave_request, 'substitute_employee_id', None) or 'Ch∆∞a ch·ªâ ƒë·ªãnh'}</td>
                    </tr>
                </table>
                
                {f'<h3>üìù Ghi ch√∫</h3><div class="highlight"><p>{leave_request.notes}</p></div>' if leave_request.notes else ''}
                
                <h3>‚ÑπÔ∏è Th√¥ng tin b·ªï sung</h3>
                <table class="info-table">
                    <tr>
                        <th>Ch·ª©ng t·ª´</th>
                        <td>{'C√≥' if has_docs else 'Kh√¥ng'}</td>
                    </tr>
                    <tr>
                        <th>Th·ªùi gian t·∫°o</th>
                        <td>{created_at.strftime('%d/%m/%Y %H:%M') if created_at else '-'}</td>
                    </tr>
                    <tr>
                        <th>Th·ªùi gian c·∫≠p nh·∫≠t</th>
                        <td>{updated_at.strftime('%d/%m/%Y %H:%M') if updated_at else '-'}</td>
                    </tr>
                </table>
                <div class="highlight" style="background:#fff3cd; padding:10px; border-left: 4px solid #ffc107; margin: 15px 0;">
                    <p><strong>‚ö†Ô∏è L∆∞u √Ω:</strong> ƒê∆°n xin ngh·ªâ ph√©p n√†y ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng qu·∫£n l√Ω ch·∫•m c√¥ng. Vui l√≤ng xem x√©t v√† ph·∫£n h·ªìi trong th·ªùi gian s·ªõm nh·∫•t.</p>
                </div>
            </div>
            
            <div class="footer">
                <p>Email ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ H·ªá th·ªëng Qu·∫£n l√Ω Ch·∫•m c√¥ng DMI</p>
                <p>Th·ªùi gian: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}</p>
            </div>
        </body>
        </html>
        """
        
        # T·∫°o plain text content
        text_content = f"""
ƒê∆†N XIN NGH·ªà PH√âP

LO·∫†I EMAIL: {action_label}

G·ª≠i t·ª´: {user.name} ({getattr(user, 'employee_id', '')})
Email: {from_email}
Th·ªùi gian g·ª≠i: {datetime.now().strftime('%d/%m/%Y %H:%M')}

TH√îNG TIN NGH·ªà PH√âP:
- L√Ω do ngh·ªâ: {leave_request.leave_reason}
- Kho·∫£ng th·ªùi gian: {from_date} {from_time} - {to_date} {to_time}
- Ca l√†m vi·ªác: Ca {leave_request.shift_code or '1'}
- T·ªïng s·ªë ng√†y ngh·ªâ: {total_days} ng√†y

PH√ÇN B·ªî NG√ÄY NGH·ªà:
- Ph√©p nƒÉm: {leave_request.annual_leave_days or 0} ng√†y
- Ngh·ªâ kh√¥ng l∆∞∆°ng: {leave_request.unpaid_leave_days or 0} ng√†y
- Ngh·ªâ ƒë·∫∑c bi·ªát: {leave_request.special_leave_days or 0} ng√†y

TH√îNG TIN THAY TH·∫æ:
- Ng∆∞·ªùi thay th·∫ø: {leave_request.substitute_name or 'Ch∆∞a ch·ªâ ƒë·ªãnh'}
- M√£ nh√¢n vi√™n thay th·∫ø: {getattr(leave_request, 'substitute_employee_id', None) or 'Ch∆∞a ch·ªâ ƒë·ªãnh'}

{f'GHI CH√ö: {leave_request.notes}' if leave_request.notes else ''}

L∆∞u √Ω: ƒê∆°n xin ngh·ªâ ph√©p n√†y ƒë√£ ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ h·ªá th·ªëng qu·∫£n l√Ω ch·∫•m c√¥ng.

---
Email ƒë∆∞·ª£c g·ª≠i t·ª± ƒë·ªông t·ª´ H·ªá th·ªëng Qu·∫£n l√Ω Ch·∫•m c√¥ng DMI
Th·ªùi gian: {datetime.now().strftime('%d/%m/%Y %H:%M:%S')}
        """
        
        # T·∫°o message
        msg = MIMEMultipart('alternative')
        # ƒê·∫∑t From hi·ªÉn th·ªã t√™n nh√¢n vi√™n; ∆∞u ti√™n email c√° nh√¢n
        display_from = f"{user.name} <{from_email}>" if from_email else from_email
        msg['From'] = display_from
        msg['To'] = hr_email
        msg['Subject'] = subject
        # Lu√¥n ƒë·ªÉ Reply-To l√† nh√¢n vi√™n
        if employee_email:
            msg['Reply-To'] = employee_email
        print(f"Mail headers -> From: {display_from}, To: {hr_email}, Reply-To: {employee_email}", flush=True)
        
        # Th√™m n·ªôi dung
        text_part = MIMEText(text_content, 'plain', 'utf-8')
        html_part = MIMEText(html_content, 'html', 'utf-8')
        
        msg.attach(text_part)
        msg.attach(html_part)
        
        # G·ª≠i email
        print("üîÑ ƒêang k·∫øt n·ªëi SMTP...", flush=True)
        try:
            server = smtplib.SMTP(smtp_server, smtp_port, timeout=10)
            print("‚úÖ K·∫øt n·ªëi SMTP th√†nh c√¥ng", flush=True)
        except Exception as e:
            print(f"‚ùå L·ªói k·∫øt n·ªëi SMTP: {e}")
            return False
        
        try:
            print("üîÑ EHLO...", flush=True)
            server.ehlo()
            print("üîÑ ƒêang b·∫≠t TLS...", flush=True)
            server.starttls()
            server.ehlo()
            print("‚úÖ TLS ƒë√£ ƒë∆∞·ª£c b·∫≠t", flush=True)
        except Exception as e:
            print(f"‚ùå L·ªói b·∫≠t TLS: {e}")
            server.quit()
            return False
        
        try:
            print("üîÑ ƒêang ƒëƒÉng nh·∫≠p SMTP...", flush=True)
            server.login(smtp_user, smtp_password)
            print("‚úÖ ƒêƒÉng nh·∫≠p SMTP th√†nh c√¥ng", flush=True)
        except Exception as e:
            print(f"‚ùå L·ªói ƒëƒÉng nh·∫≠p SMTP: {e}")
            server.quit()
            return False
        
        try:
            print("üîÑ ƒêang g·ª≠i email...", flush=True)
            # Envelope sender: ∆∞u ti√™n email nh√¢n vi√™n theo y√™u c·∫ßu; fallback MAIL_FROM
            envelope_from = from_email or Config.MAIL_FROM or smtp_user
            print(f"Envelope From: {envelope_from}", flush=True)
            try:
                server.sendmail(envelope_from, [hr_email], msg.as_string())
            except Exception as e_first:
                print(f"‚ùå G·ª≠i v·ªõi envelope nh√¢n vi√™n th·∫•t b·∫°i: {e_first}", flush=True)
                # Fallback g·ª≠i b·∫±ng MAIL_FROM ƒë·ªÉ tƒÉng t·ªâ l·ªá th√†nh c√¥ng
                fallback_from = Config.MAIL_FROM or smtp_user
                print(f"üîÅ Th·ª≠ l·∫°i v·ªõi envelope: {fallback_from}", flush=True)
                server.sendmail(fallback_from, [hr_email], msg.as_string())
            print("‚úÖ Email ƒë√£ ƒë∆∞·ª£c g·ª≠i", flush=True)
        except Exception as e:
            print(f"‚ùå L·ªói g·ª≠i email: {e}")
            server.quit()
            return False
        
        try:
            print("üîÑ ƒêang ƒë√≥ng k·∫øt n·ªëi...", flush=True)
            server.quit()
            print("‚úÖ K·∫øt n·ªëi ƒë√£ ƒë∆∞·ª£c ƒë√≥ng", flush=True)
        except Exception as e:
            print(f"‚ö†Ô∏è L·ªói ƒë√≥ng k·∫øt n·ªëi: {e}")
        
        print(f"üéâ Email xin ph√©p ngh·ªâ ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng ƒë·∫øn {hr_email}", flush=True)
        print("=== K·∫æT TH√öC G·ª¨I EMAIL ===", flush=True)
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi g·ª≠i email xin ph√©p ngh·ªâ: {str(e)}")
        print(f"‚ùå Lo·∫°i l·ªói: {type(e).__name__}")
        import traceback
        print(f"‚ùå Chi ti·∫øt l·ªói: {traceback.format_exc()}")
        print("=== K·∫æT TH√öC G·ª¨I EMAIL (L·ªñI) ===")
        return False


def send_leave_request_email_async(leave_request, user, action='create'):
    """
    G·ª≠i email xin ph√©p ngh·ªâ b·∫•t ƒë·ªìng b·ªô (kh√¥ng ch·∫∑n response)
    """
    def send_email_thread():
        try:
            print(f"üöÄ [ASYNC] B·∫Øt ƒë·∫ßu g·ª≠i email b·∫•t ƒë·ªìng b·ªô cho leave_request #{leave_request.id}", flush=True)
            print(f"üìß [ASYNC] Th√¥ng tin ƒë∆°n: ID={leave_request.id}, User={user.name}, Status={getattr(leave_request, 'status', 'unknown')}", flush=True)
            
            # C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒëang g·ª≠i
            from app import app, upsert_email_status, publish_email_status
            from state.email_state import email_status
            email_status[leave_request.id] = {
                'status': 'sending',
                'message': 'ƒêang g·ª≠i email...',
                'timestamp': time.time()
            }
            print(f"üì§ [ASYNC] Set global status to sending for request #{leave_request.id}")
            # Persist to DB as well
            try:
                with app.app_context():
                    upsert_email_status(leave_request.id, 'sending', 'ƒêang g·ª≠i email...')
                    publish_email_status(user.id, leave_request.id, 'sending', 'ƒêang g·ª≠i email...')
            except Exception as _:
                pass
            
            # T·∫°o application context cho thread
            with app.app_context():
                result = send_leave_request_email(leave_request, user, action)
                if result:
                    print(f"‚úÖ [ASYNC] Email g·ª≠i th√†nh c√¥ng cho leave_request #{leave_request.id}", flush=True)
                    email_status[leave_request.id] = {
                        'status': 'success',
                        'message': 'Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!',
                        'timestamp': time.time()
                    }
                    print(f"‚úÖ [ASYNC] Set global status to success for request #{leave_request.id}")
                    upsert_email_status(leave_request.id, 'success', 'Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!')
                    publish_email_status(user.id, leave_request.id, 'success', 'Email ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng!')
                else:
                    print(f"‚ùå [ASYNC] Email g·ª≠i th·∫•t b·∫°i cho leave_request #{leave_request.id}", flush=True)
                    email_status[leave_request.id] = {
                        'status': 'error',
                        'message': 'G·ª≠i email th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh SMTP.',
                        'timestamp': time.time()
                    }
                    print(f"‚ùå [ASYNC] Set global status to error for request #{leave_request.id}")
                    upsert_email_status(leave_request.id, 'error', 'G·ª≠i email th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh SMTP.')
                    publish_email_status(user.id, leave_request.id, 'error', 'G·ª≠i email th·∫•t b·∫°i. Vui l√≤ng ki·ªÉm tra c·∫•u h√¨nh SMTP.')
        except Exception as e:
            print(f"üí• [ASYNC] L·ªói trong thread g·ª≠i email: {e}", flush=True)
            from app import email_status
            email_status[leave_request.id] = {
                'status': 'error',
                'message': f'L·ªói g·ª≠i email: {str(e)}',
                'timestamp': time.time()
            }
    
    # T·∫°o thread m·ªõi ƒë·ªÉ g·ª≠i email
    thread = threading.Thread(target=send_email_thread, daemon=True)
    thread.start()
    print(f"üì§ [ASYNC] ƒê√£ kh·ªüi t·∫°o thread g·ª≠i email cho leave_request #{leave_request.id}", flush=True)
